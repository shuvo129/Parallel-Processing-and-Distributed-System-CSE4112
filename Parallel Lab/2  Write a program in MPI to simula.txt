2  Write a program in MPI to simulate a simple calculator. Perform each operation using a different process in parallel.


#include <iostream>
#include <mpi.h>

using namespace std;

int main(int argc, char* argv[]) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    const int MASTER = 0;

    if (size != 5) {
        if (rank == MASTER) {
            cout << "This program requires 5 processes (1 master and 4 worker processes)." << endl;
        }
        MPI_Finalize();
        return 1;
    }

    int number1, number2, result;

    if (rank == MASTER) {
        // Generate two random numbers
        srand(time(NULL));
        number1 = rand() % 100;
        number2 = rand() % 50;

        cout << "Generated numbers: " << number1 << " and " << number2 << endl;

        // Send numbers to respective operation processes
        for (int dest = 1; dest < size; ++dest) {
            MPI_Send(&number1, 1, MPI_INT, dest, 0, MPI_COMM_WORLD);
            MPI_Send(&number2, 1, MPI_INT, dest, 0, MPI_COMM_WORLD);
        }

        // Receive results from respective operation processes
        for (int source = 1; source < size; ++source) {
            MPI_Recv(&result, 1, MPI_INT, source, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            cout << "Result from process " << source << ": " << result << endl;
        }
    } else {
        // Receive numbers from master
        MPI_Recv(&number1, 1, MPI_INT, MASTER, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        MPI_Recv(&number2, 1, MPI_INT, MASTER, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        // Perform operation based on process rank
        switch (rank) {
            case 1:
                result = number1 + number2; // Addition
                break;
            case 2:
                result = number1 - number2; // Subtraction
                break;
            case 3:
                result = number1 * number2; // Multiplication
                break;
            case 4:
                if (number2 != 0) {
                    result = number1 / number2; // Division
                } else {
                    result = INT_MAX; // Indicate division by zero
                }
                break;
        }

        // Send result back to master
        MPI_Send(&result, 1, MPI_INT, MASTER, 0, MPI_COMM_WORLD);
    }

    MPI_Finalize();

    return 0;
}


